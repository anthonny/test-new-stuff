{"version":3,"sources":["logger.ts","i18n.ts","providers/index.ts","machines/inspector.ts","services/repository/localRepository.ts","services/authentication/localStorageAuthentication.ts","services/configuration/remoteConfiguration.ts","machines/setup.machine.ts","components/Button.tsx","pages/setup/StepVault.tsx","pages/setup/StepRepository.tsx","pages/setup/StepCloning.tsx","pages/setup/SetupWelcome.tsx","pages/setup/SetupContainer.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","styles/GlobalStyle.tsx","index.tsx","providers/gitlab.ts"],"names":["log","setLevel","levels","WARN","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","process","interpolation","escapeValue","backend","loadPath","provider","require","window","Cypress","inspect","iframe","fs","pfs","VAULT_KEY","getVault","vault","localStorage","getItem","undefined","validateConfiguration","configuration","sourceRepository","url","branch","publicationRepository","fetchRepositoryConfiguration","a","axios","get","resp","data","Error","JSON","stringify","fsName","publicationRepositoryDir","sourceRepositoryDir","initializeDirectories","wipe","FS","promises","mkdir","info","cloneRepositores","credentials","console","error","git","clone","http","dir","corsProxy","ref","singleBranch","depth","onAuth","_url","username","password","token","getLocalRepositoryConfiguration","path","readdir","getConfig","currentBranch","origin","getLocalRepositoriesConfiguration","sourceRepositoryConfiguration","publicationRepositoryConfiguration","setupMachine","Machine","id","initial","context","remoteConfiguration","profile","states","initializingDirectories","invoke","src","onDone","target","onError","checkingGlobalSetup","type","checkingRemoteConfiguration","checking","actions","done","checkingLocalVault","dealWithPossibilities","always","cond","ctx","welcomeInitializeApplication","on","SUBMIT_WELCOME","welcomeInitializeVaultOnly","initializeVault","idle","SUBMIT_CREDENTIALS","authenticating","entry","assign","_context","_event","validatingAuthorization","authenticated","initializeRepositories","checkingIfGoNext","SUBMIT_REPOSITORY","validateRepository","event","defaultConfiguration","repositoryUrl","cloneRespositories","start","allGood","setRemoteConfiguration","_ctx","setVault","setCredentialsAndProfile","authentication","message","services","checkRemoteConfiguration","checkVault","checkLocalRepositoriesConfiguration","authenticate","getProfile","validateAuthorization","isAuthorizedToPush","cloneRepositories","setupService","interpret","devTools","Button","styled","button","variant","isSmall","css","Wrapper","tw","div","FormWrapper","form","Title","h1","Label","label","Input","input","StepVault","onSubmit","t","useTranslation","useForm","register","handleSubmit","errors","formState","htmlFor","placeholder","required","StepRepository","StepCloning","state","matches","SetupWelcome","onClick","Header","title","avatar_url","alt","SetupContainer","useService","setupState","sendSetup","some","payload","infos","REACT_APP_TEST","App","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","ReactDOM","render","StrictMode","GlobalStyle","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","name","api","Gitlab","Users","current","user","email","extractProjectNameFromUrl","parts","split","length","projectName","Projects","show","project","permissions","hasProjectAccess","project_access","hasProjectAccessLevel","access_level","hasGroupAccessLevel","group_access"],"mappings":"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","file":"static/js/main.fa70551d.chunk.js","sourcesContent":["import log from \"loglevel\";\n\nif (process.env.NODE_ENV === \"production\") {\n  log.setLevel(log.levels.WARN);\n} else {\n  log.setLevel(log.levels.DEBUG);\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: \"en\",\n    debug: process.env.NODE_ENV !== \"production\",\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    backend: {\n      loadPath: \"./locales/{{lng}}/{{ns}}.json\",\n    },\n  });\n\nexport default i18n;\n","/**\n *\n * We want to select the provider at BUILD time\n * So we can't use CONST for provider nor switch instead of if\n * If that everything will be bundled no matter the value of PROVIDER\n * and hte import will be done at RUNTIME\n *\n * Keep literals and if :)\n */\n\ntype getProfile = (data: { username: string; personalToken: string; password: string }) => string;\n\nexport interface Provider {\n  getProfile: getProfile;\n  infos: { name: string };\n  isAuthorizedToPush: boolean;\n}\n\nlet provider: Provider;\n\nif (process.env.REACT_APP_PROVIDER === \"github\") {\n  provider = require(`./github`);\n}\n\nif (process.env.REACT_APP_PROVIDER === \"gitlab\") {\n  provider = require(`./gitlab`);\n}\n\nif (!process.env.REACT_APP_PROVIDER) {\n  throw new Error(\"REACT_APP_PROVIDER is not defined\");\n}\n// @ts-ignore\nexport default provider;\n","import { inspect } from \"@xstate/inspect\";\n\n// @ts-ignore\nif (!window.Cypress) {\n  inspect({\n    // url: \"https://statecharts.io/inspect\",\n    iframe: false,\n  });\n}\n","import log from \"loglevel\";\nimport FS from \"@isomorphic-git/lightning-fs\";\nimport git, { PromiseFsClient } from \"isomorphic-git\";\nimport http from \"isomorphic-git/http/web\";\nimport { Configuration } from \"services/configuration/remoteConfiguration\";\n\nconst fsName = \"ohmy\";\nconst publicationRepositoryDir = \"/publicationRepository\";\nconst sourceRepositoryDir = \"/sourceRepository\";\n\nlet fs: PromiseFsClient;\nlet pfs: typeof fs.promises;\n\nexport const initializeDirectories = async (wipe: boolean = false) => {\n  fs = new FS(fsName, { wipe });\n  pfs = fs.promises;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    window.fs = fs;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    window.pfs = pfs;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    window.publicationRepositoryDir = publicationRepositoryDir;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    window.sourceRepositoryDir = sourceRepositoryDir;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    window.git = git;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    window.http = http;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    window.FS = FS;\n  }\n\n  try {\n    await pfs.mkdir(sourceRepositoryDir);\n  } catch (e) {\n    log.info(\"Source directory already 👍\");\n  }\n  try {\n    await pfs.mkdir(publicationRepositoryDir);\n  } catch (e) {\n    log.info(\"Publication directory already 👍\");\n  }\n};\n\nexport const status = async (configuration: Configuration | string) => {\n  // By default if we don't have\n  log.debug(\"localRepository.status - remoteInformations\", configuration);\n\n  try {\n    const remoteOriginUrl = await git.getConfig({\n      fs,\n      dir: sourceRepositoryDir,\n      path: \"remote.origin.url\",\n    });\n    log.debug(\"localRepository.status - remoteOriginUrl\", remoteOriginUrl);\n\n    let result;\n    if (sourceRepositoryHasSameOrigin(configuration, remoteOriginUrl)) {\n      result = {\n        state: \"LOCAL_REPOSITORY_CLONED_BUT_INVALID\",\n        reason:\n          \"The sourceRepository origin is not the same than the source origin from the config.json file\",\n      };\n    } else {\n      result = \"LOCAL_REPOSITORY_CLONED\";\n    }\n\n    return result;\n  } catch (error) {\n    log.debug(\"localRepository.status - error\", error);\n    log.info(\"localRepository.status - repository not cloned\");\n    return \"LOCAL_REPOSITORY_NOT_CLONED\";\n  }\n};\n\nexport const sourceRepositoryHasSameOrigin = (\n  remoteInformations: Configuration | string,\n  remoteOriginUrl: string\n) =>\n  typeof remoteInformations !== \"string\" &&\n  remoteInformations.sourceRepository.url !== remoteOriginUrl;\n\nexport const cloneRepositores = async ({\n  configuration,\n  credentials,\n}: {\n  configuration: Configuration;\n  credentials: any;\n}) => {\n  console.error({ configuration, credentials });\n  await git.clone({\n    fs,\n    http,\n    dir: sourceRepositoryDir,\n    corsProxy: \"https://cors.isomorphic-git.org\",\n    url: configuration.sourceRepository.url,\n    ref: configuration.sourceRepository.branch,\n    singleBranch: true,\n    depth: 10,\n    onAuth: (_url) => ({ username: credentials.username, password: credentials.token }),\n  });\n\n  await git.clone({\n    fs,\n    http,\n    dir: publicationRepositoryDir,\n    corsProxy: \"https://cors.isomorphic-git.org\",\n    url: configuration.publicationRepository.url,\n    ref: configuration.publicationRepository.branch,\n    singleBranch: true,\n    depth: 1,\n    onAuth: (_url) => ({ username: credentials.username, password: credentials.token }),\n  });\n  log.debug(\"Repositories cloned\");\n};\n\nconst getLocalRepositoryConfiguration = async ({ path }: { path: string }) => {\n  log.debug(\"getLocalRepositoryConfiguration\");\n  const gitFolder = \"/.git\";\n  try {\n    await pfs.readdir(path + gitFolder);\n  } catch (error) {\n    // path does not exist\n    log.debug(`Error while reading ${path}`, error);\n    return undefined;\n  }\n\n  const url = await git.getConfig({\n    fs,\n    dir: path,\n    path: \"remote.origin.url\",\n  });\n\n  const branch = await git.currentBranch({\n    fs,\n    dir: path,\n  });\n  log.debug(\"localRepository.status - remoteOriginUrl\", origin);\n\n  return {\n    url,\n    branch,\n  };\n};\n\nexport const getLocalRepositoriesConfiguration = async () => {\n  const sourceRepositoryConfiguration = await getLocalRepositoryConfiguration({\n    path: sourceRepositoryDir,\n  });\n\n  const publicationRepositoryConfiguration = await getLocalRepositoryConfiguration({\n    path: publicationRepositoryDir,\n  });\n\n  log.debug(sourceRepositoryConfiguration, publicationRepositoryConfiguration);\n\n  // TODO: maybe we could use a && here and manage the fact that one of the two\n  // repositories is not well initialized\n  if (!sourceRepositoryConfiguration || !publicationRepositoryConfiguration) {\n    return undefined;\n  }\n  return {\n    sourceRepositoryConfiguration,\n    publicationRepositoryConfiguration,\n  };\n};\n","const VAULT_KEY = \"ohmy-vault\";\n\nexport const getVault = (): string | undefined => {\n  const vault = localStorage.getItem(VAULT_KEY);\n  return vault !== null ? vault : undefined;\n};\nexport const getAuthenticationData = (): string | null => localStorage.getItem(VAULT_KEY);\n","import axios from \"axios\";\n\ninterface RepositoryInformations {\n  url: string;\n  branch: string;\n}\n\nexport interface Configuration {\n  sourceRepository: RepositoryInformations;\n  publicationRepository: RepositoryInformations;\n}\n\nexport const validateConfiguration = (configuration: any): Configuration | undefined =>\n  configuration.sourceRepository?.url &&\n  configuration.sourceRepository?.branch &&\n  configuration.publicationRepository?.url &&\n  configuration.publicationRepository?.branch\n    ? (configuration as Configuration)\n    : undefined;\n\nexport const fetchRepositoryConfiguration = async (): Promise<Configuration> => {\n  const resp = await axios.get(\"./config.json\");\n\n  const configuration = validateConfiguration(resp.data);\n\n  if (!configuration) {\n    throw new Error(`The configuration is not valid: ${JSON.stringify(resp.data)}`);\n  }\n\n  return configuration;\n};\n\nexport const defaultConfiguration = ({ url }: { url: string }): Configuration => {\n  return {\n    sourceRepository: {\n      url,\n      branch: \"main\",\n    },\n    publicationRepository: {\n      url,\n      branch: \"main\",\n    },\n  };\n};\n","import log from \"loglevel\";\nimport { getVault } from \"services/authentication/localStorageAuthentication\";\nimport {\n  defaultConfiguration,\n  fetchRepositoryConfiguration,\n} from \"services/configuration/remoteConfiguration\";\nimport { assign, interpret, Machine } from \"xstate\";\nimport { Configuration } from \"../services/configuration/remoteConfiguration\";\nimport { getProfile, isAuthorizedToPush } from \"providers/gitlab\";\nimport {\n  cloneRepositores,\n  getLocalRepositoriesConfiguration,\n  initializeDirectories,\n} from \"services/repository/localRepository\";\n\nexport interface SetupMachineSchema {\n  states: {\n    initializingDirectories: {};\n    checkingGlobalSetup: {\n      states: {\n        checkingRemoteConfiguration: {\n          states: {\n            checking: {};\n            done: {};\n          };\n        };\n        checkingLocalVault: {\n          states: {\n            checking: {};\n            done: {};\n          };\n        };\n      };\n    };\n    dealWithPossibilities: {};\n    welcomeInitializeApplication: {};\n    welcomeInitializeVaultOnly: {};\n    initializeVault: {\n      states: {\n        idle: {};\n        authenticating: {};\n        validatingAuthorization: {};\n        authenticated: {};\n      };\n    };\n    initializeRepositories: {\n      states: {\n        checkingIfGoNext: {};\n        idle: {};\n        validateRepository: {};\n        cloneRespositories: {\n          states: {\n            start: {};\n            done: {};\n          };\n        };\n        done: {};\n      };\n    };\n    allGood: {};\n  };\n}\n\nexport type SetupMachineEvents =\n  | { type: \"SUBMIT_WELCOME\" }\n  | { type: \"SUBMIT_CREDENTIALS\" }\n  | { type: \"SUBMIT_REPOSITORY\" }\n  | { type: \"CHECK_AUTHORIZATION_IF_CONFIGURED\" }\n  | { type: \"CHECK_IF_STEP_REPOSITORY_REQUIRED\" };\n\nexport interface SetupMachineContext {\n  error: string | undefined;\n  remoteConfiguration: Configuration | undefined;\n  vault: any;\n  credentials: any;\n  profile: any;\n}\n\nexport const setupMachine = Machine<SetupMachineContext, SetupMachineSchema, SetupMachineEvents>(\n  {\n    id: \"setup\",\n    initial: \"initializingDirectories\",\n    context: {\n      error: undefined,\n      remoteConfiguration: undefined,\n      vault: undefined,\n      credentials: undefined,\n      profile: undefined,\n    },\n    states: {\n      initializingDirectories: {\n        invoke: {\n          src: \"initializeDirectories\",\n          onDone: { target: \"checkingGlobalSetup\" },\n          onError: { target: \"checkingGlobalSetup\" },\n        },\n      },\n      checkingGlobalSetup: {\n        type: \"parallel\",\n        states: {\n          checkingRemoteConfiguration: {\n            initial: \"checking\",\n            states: {\n              checking: {\n                invoke: {\n                  src: \"checkRemoteConfiguration\",\n                  onDone: { target: \"done\", actions: \"setRemoteConfiguration\" },\n                  onError: { target: \"done\" },\n                },\n              },\n              done: {\n                type: \"final\",\n              },\n            },\n          },\n          checkingLocalVault: {\n            initial: \"checking\",\n            states: {\n              checking: {\n                invoke: {\n                  src: \"checkVault\",\n                  onDone: { target: \"done\", actions: \"setVault\" },\n                  onError: { target: \"done\" },\n                },\n              },\n              done: {\n                type: \"final\",\n              },\n            },\n          },\n          // checkingLocalRepositoriesConfiguration: {\n          //   initial: \"checking\",\n          //   states: {\n          //     checking: {\n          //       invoke: {\n          //         src: \"checkLocalRepositoriesConfiguration\",\n          //         onDone: { target: \"done\", actions: \"setLocalRepositoriesConfiguration\" },\n          //         onError: { target: \"done\" },\n          //       },\n          //     },\n          //     done: {\n          //       type: \"final\",\n          //     },\n          //   },\n          // },\n        },\n        onDone: \"dealWithPossibilities\",\n      },\n      dealWithPossibilities: {\n        always: [\n          {\n            target: \"welcomeInitializeApplication\",\n            cond: (ctx) => !ctx.remoteConfiguration,\n          },\n          {\n            target: \"welcomeInitializeVaultOnly\",\n            cond: (ctx) => ctx.remoteConfiguration && !ctx.vault,\n          },\n          {\n            target: \"allGood\",\n            cond: (ctx) => ctx.remoteConfiguration && ctx.vault,\n          },\n        ],\n      },\n      welcomeInitializeApplication: {\n        on: {\n          SUBMIT_WELCOME: \"initializeVault\",\n        },\n      },\n      welcomeInitializeVaultOnly: {\n        on: {\n          SUBMIT_WELCOME: \"initializeVault\",\n        },\n      },\n      initializeVault: {\n        initial: \"idle\",\n        states: {\n          idle: {\n            on: {\n              SUBMIT_CREDENTIALS: \"authenticating\",\n            },\n          },\n          authenticating: {\n            entry: assign({ error: (_context, _event) => undefined }),\n            invoke: {\n              src: \"authenticate\",\n              onDone: { target: \"validatingAuthorization\", actions: \"setCredentialsAndProfile\" },\n              onError: { target: \"idle\", actions: \"onError\" },\n            },\n          },\n          validatingAuthorization: {\n            invoke: {\n              src: \"validateAuthorization\",\n              onDone: { target: \"authenticated\" },\n              onError: { target: \"idle\", actions: \"onError\" },\n            },\n          },\n          authenticated: {\n            type: \"final\",\n          },\n        },\n        onDone: \"initializeRepositories\",\n      },\n      initializeRepositories: {\n        initial: \"checkingIfGoNext\",\n        states: {\n          checkingIfGoNext: {\n            always: [\n              {\n                target: \"done\",\n                cond: (context, _event) => {\n                  return context.remoteConfiguration !== undefined;\n                },\n              },\n              {\n                target: \"idle\",\n                cond: (context, _event) => {\n                  return context.remoteConfiguration === undefined;\n                },\n              },\n            ],\n          },\n          idle: {\n            on: {\n              SUBMIT_REPOSITORY: \"validateRepository\",\n            },\n          },\n          validateRepository: {\n            entry: assign({\n              remoteConfiguration: (_context, event: any) => {\n                console.log(event);\n                return defaultConfiguration({ url: event.repositoryUrl });\n              },\n              error: (_context, _event) => undefined,\n            }),\n            invoke: {\n              src: \"validateAuthorization\",\n              onDone: { target: \"cloneRespositories\" },\n              onError: { target: \"idle\", actions: \"onError\" },\n            },\n          },\n          cloneRespositories: {\n            initial: \"start\",\n            states: {\n              start: {\n                invoke: {\n                  src: \"cloneRepositories\",\n                  onDone: { target: \"done\" },\n                  onError: {},\n                },\n              },\n              done: {\n                type: \"final\",\n              },\n            },\n            onDone: \"done\",\n          },\n          done: {\n            type: \"final\",\n          },\n        },\n        onDone: \"allGood\",\n      },\n      allGood: {\n        type: \"final\",\n      },\n    },\n  },\n  {\n    actions: {\n      setRemoteConfiguration: assign({\n        remoteConfiguration: (_ctx, event: any) => {\n          return event.data;\n        },\n      }),\n      setVault: assign({\n        vault: (_ctx, event: any) => {\n          return event.data;\n        },\n      }),\n      setCredentialsAndProfile: assign({\n        credentials: (_ctx, event: any) => {\n          log.debug(\"setAuthenticationAndProfile\", event);\n          return event.data.authentication;\n        },\n        profile: (_ctx, event: any) => {\n          log.debug(\"setAuthenticationAndProfile\", event);\n          return event.data.profile;\n        },\n      }),\n      onError: assign({\n        error: (_ctx, event: any) => {\n          log.debug(\"Something happened:\", event.data.message);\n          return event.data.message;\n        },\n      }),\n    },\n    services: {\n      initializeDirectories: async (_ctx, _event) => initializeDirectories(),\n      checkRemoteConfiguration: async (_ctx, _event) => fetchRepositoryConfiguration(),\n      checkVault: async (_ctx, _event) => getVault(),\n      checkLocalRepositoriesConfiguration: async (_ctx, _event) =>\n        getLocalRepositoriesConfiguration(),\n      authenticate: async (_ctx, event: any) => {\n        const { type: _type, ...authentication } = event;\n        try {\n          const profile = await getProfile({ token: authentication.token });\n\n          return {\n            profile,\n            authentication,\n          };\n        } catch (error) {\n          throw new Error(\"setup.authentication.errors.authentication_failed\");\n        }\n      },\n      validateAuthorization: async ({ remoteConfiguration, credentials }, _event: any) => {\n        if (remoteConfiguration === undefined) {\n          return;\n        }\n\n        log.debug(\"validateAuthorization\", remoteConfiguration);\n        // Validate Authorization\n        const isAuthorized = await isAuthorizedToPush({\n          configuration: remoteConfiguration,\n          token: credentials.token,\n        });\n\n        if (!isAuthorized) {\n          throw new Error(\"setup.authentication.errors.not_authorized\");\n        }\n      },\n      cloneRepositories: async (ctx, _event) => {\n        if (!ctx.remoteConfiguration) {\n          return;\n        }\n        await initializeDirectories(true);\n        debugger;\n        await cloneRepositores({\n          configuration: ctx.remoteConfiguration,\n          credentials: ctx.credentials,\n        });\n      },\n    },\n  }\n);\n\nexport const setupService = interpret(setupMachine, {\n  //@ts-ignore\n  devTools: !window.Cypress,\n}).start();\n","import tw, { styled, css, theme } from \"twin.macro\";\n\n// Export interface for Button.stories.tsx\nexport interface ButtonProps {\n  variant?: \"primary\" | \"secondary\";\n  isSmall?: boolean;\n}\n\nexport const Button = styled.button(({ variant, isSmall }: ButtonProps) => [\n  // The common button styles added with the tw import\n  tw`px-8 py-2 rounded focus:outline-none transform duration-75`,\n\n  // Use the variant grouping feature to add variants to multiple classes\n  tw`hocus:(scale-105 text-yellow-400)`,\n\n  // Use props to conditionally style your components\n  variant === \"primary\" && tw`bg-black text-white border-black`,\n\n  // Combine regular css with tailwind classes within backticks\n  variant === \"secondary\" && [\n    css`\n      box-shadow: 0 0.1em 0 0 rgba(0, 0, 0, 0.25);\n    `,\n    tw`border-2 border-yellow-600`,\n  ],\n\n  // Conditional props can be used\n  isSmall ? tw`text-sm` : tw`text-lg`,\n\n  // The theme import can supply values from your tailwind.config.js\n  css`\n    color: ${theme`colors.white`};\n  `,\n]);\n","import tw from \"twin.macro\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"components/Button\";\n\nconst Wrapper = tw.div`h-full w-full flex justify-center items-center`;\n\nconst FormWrapper = tw.form`flex flex-col justify-center items-center max-w-sm`;\n\nconst Title = tw.h1`text-2xl font-bold`;\n\nconst Label = tw.label`mt-2`;\nconst Input = tw.input`w-full border-2 border-gray-300 `;\n\nexport interface Props {\n  onSubmit: (data: any) => void;\n  error: string | undefined;\n}\n\ninterface Inputs {\n  username: string;\n  token: string;\n  password: string;\n}\n\nexport const StepVault = ({ onSubmit, error }: Props) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<Inputs>();\n  return (\n    <Wrapper>\n      <FormWrapper onSubmit={handleSubmit(onSubmit)}>\n        <Title>Authentication</Title>\n\n        {error && <div css={[tw`px-6 py-2 bg-red-200`]}>{t(error)}</div>}\n\n        <Label htmlFor=\"username\">Username</Label>\n        <Input\n          id=\"username\"\n          placeholder=\"Your username\"\n          {...register(\"username\", { required: true })}\n        />\n        {errors.username && <span>This field is required</span>}\n\n        <Label htmlFor=\"token\">Personal Token</Label>\n        <Input id=\"token\" {...register(\"token\", { required: true })} />\n        {errors.token && <span>This field is required</span>}\n\n        <Label htmlFor=\"password\">Password</Label>\n        <Input id=\"password\" type=\"password\" {...register(\"password\", { required: true })} />\n        {errors.password && <span>This field is required</span>}\n\n        <Button css={[tw`mt-8`]} variant=\"primary\" type=\"submit\">\n          Ok\n        </Button>\n      </FormWrapper>\n    </Wrapper>\n  );\n};\n","import tw from \"twin.macro\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport { Button } from \"components/Button\";\n\nconst Wrapper = tw.div`h-full w-full flex justify-center items-center`;\n\nconst FormWrapper = tw.form`flex flex-col justify-center items-center max-w-sm`;\n\nconst Title = tw.h1`text-2xl font-bold`;\n\nconst Label = tw.label`mt-2`;\nconst Input = tw.input`w-full border-2 border-gray-300 `;\n\nexport interface Props {\n  onSubmit: (data: any) => void;\n  error: string | undefined;\n}\n\ninterface Inputs {\n  repositoryUrl: string;\n}\n\nexport const StepRepository = ({ onSubmit, error }: Props) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<Inputs>();\n  return (\n    <Wrapper>\n      <FormWrapper onSubmit={handleSubmit(onSubmit)}>\n        <Title>Repository</Title>\n\n        {error && <div css={[tw`px-6 py-2 bg-red-200`]}>{t(error)}</div>}\n\n        <Label htmlFor=\"repositoryUrl\">URL of your repository</Label>\n        <Input\n          id=\"repositoryUrl\"\n          placeholder=\"https://gitlab.com/sdfsf\"\n          {...register(\"repositoryUrl\", { required: true })}\n        />\n        {errors.repositoryUrl && <span>This field is required</span>}\n\n        <Button css={[tw`mt-8`]} variant=\"primary\" type=\"submit\">\n          Ok\n        </Button>\n      </FormWrapper>\n    </Wrapper>\n  );\n};\n","import { SetupMachineContext, SetupMachineEvents } from \"machines/setup.machine\";\nimport { State } from \"xstate\";\n\nexport const StepCloning = ({\n  state,\n}: {\n  state: State<SetupMachineContext, SetupMachineEvents, any, any>;\n}) => {\n  return (\n    <>\n      {state.matches(\"stepCloning.start\") && <div>Cloning</div>}\n      {state.matches(\"stepCloning.done\") && <div>Cloned</div>}\n    </>\n  );\n};\n","import { Button } from \"components/Button\";\n\ninterface Props {\n  onSubmit: (data: any) => void;\n}\n\nexport const SetupWelcome = ({ onSubmit }: Props) => {\n  return (\n    <>\n      <div>Welcome</div>\n      <Button onClick={onSubmit}>Next</Button>\n    </>\n  );\n};\n","import { useService } from \"@xstate/react\";\nimport { SetupMachineContext, SetupMachineEvents } from \"machines/setup.machine\";\nimport { Interpreter } from \"xstate\";\nimport { StepVault } from \"./StepVault\";\nimport tw from \"twin.macro\";\nimport { StepRepository } from \"./StepRepository\";\nimport { StepCloning } from \"./StepCloning\";\nimport { SetupWelcome } from \"./SetupWelcome\";\n\nexport interface Props {\n  setupService: Interpreter<SetupMachineContext, any, SetupMachineEvents, any>;\n}\n\nconst Header = ({ title, profile }: any) => {\n  return (\n    <div css={[tw`bg-red-200`]}>\n      <span>{title}</span>\n\n      {profile && <img src={profile.avatar_url} alt=\"\" />}\n    </div>\n  );\n};\n\nexport const SetupContainer = ({ setupService }: Props) => {\n  const [setupState, sendSetup] = useService(setupService);\n\n  const handleWelcomeSubmit = () => sendSetup({ type: \"SUBMIT_WELCOME\" });\n  const handleAuthenticationSubmit = (payload: any) =>\n    sendSetup({ type: \"SUBMIT_CREDENTIALS\", ...payload });\n\n  const handleRepositorySubmit = (payload: any) =>\n    sendSetup({ type: \"SUBMIT_REPOSITORY\", ...payload });\n\n  return (\n    <>\n      <div css={[tw`flex flex-col h-screen`]}>\n        <Header\n          title={setupState.matches(\"stepAuthentication\") ? \"Authentication\" : \"Repository\"}\n          profile={setupState.context.profile}\n        />\n        <div css={[tw`flex-1 bg-green-400`]}>\n          {[\"welcomeInitializeApplication\", \"welcomeInitializeVaultOnly\"].some(\n            setupState.matches\n          ) && <SetupWelcome onSubmit={handleWelcomeSubmit} />}\n          {setupState.matches(\"initializeVault\") && (\n            <StepVault error={setupState.context.error} onSubmit={handleAuthenticationSubmit} />\n          )}\n          {setupState.matches(\"initializeRepositories\") && (\n            <StepRepository error={setupState.context.error} onSubmit={handleRepositorySubmit} />\n          )}\n          {setupState.matches(\"stepCloning\") && <StepCloning state={setupState} />}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { useService } from \"@xstate/react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport provider from \"./providers\";\nimport \"twin.macro\";\nimport \"./machines/inspector\";\nimport { setupService } from \"machines/setup.machine\";\nimport { SetupContainer } from \"pages/setup/SetupContainer\";\n\nlet test = () => {};\nconsole.error(provider.infos, process.env.NODE_ENV, process.env.REACT_APP_TEST);\n\ntest();\n\nconst Home = () => (\n  <h1>\n    Home\n    <div>\n      <button onClick={() => console.log(\"clicked\")}>Load</button>\n    </div>\n  </h1>\n);\n\nfunction App() {\n  const [setupState] = useService(setupService);\n\n  const isSetupInitialized = setupState.matches(\"initialized\");\n  const isAuthenticated = false;\n\n  switch (true) {\n    case !isSetupInitialized:\n      return <SetupContainer setupService={setupService} />;\n\n    case !isAuthenticated:\n      return <div>Need Auth {JSON.stringify(setupState.context)}</div>;\n\n    default:\n      return (\n        <>\n          <Home />\n          <div>\n            <Link style={{ marginRight: \"10px\" }} to=\"/\">\n              Home\n            </Link>\n            <Link style={{ marginRight: \"10px\" }} to=\"/todos\">\n              Todos\n            </Link>\n            <Link style={{ marginRight: \"10px\" }} to=\"/not-foudofudfosuf\">\n              Lost\n            </Link>\n            <Link style={{ marginRight: \"10px\" }} to=\"/sign-in\">\n              Sign-in\n            </Link>\n          </div>\n        </>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import { createGlobalStyle } from \"styled-components\";\n// import tw, { theme, GlobalStyles as BaseStyles } from \"twin.macro\";\nimport { GlobalStyles as BaseStyles } from \"twin.macro\";\n\n// const CustomStyles = createGlobalStyle`\n// \tbody {\n// \t\t-webkit-tap-highlight-color: ${theme`colors.purple.500`};\n//     ${tw`antialiased`}\n// \t}\n// `;\n\nconst GlobalStyles = () => (\n  <>\n    <BaseStyles />\n  </>\n);\n\nexport default GlobalStyles;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./logger\";\nimport \"./i18n\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport GlobalStyles from \"styles/GlobalStyle\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n// initializeDirectories(true).then(() => {\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <GlobalStyles />\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import log from \"loglevel\";\nimport { Gitlab } from \"@gitbeaker/browser\";\nimport { Configuration } from \"services/configuration/remoteConfiguration\";\n\nexport const infos = {\n  name: \"gitlab\",\n};\n\ninterface getProfileParams {\n  token: string;\n}\n\n// export const validateRepositoryAccess = async ({ token }: getProfileParams) => {\n//   const api = new Gitlab({\n//     token: token,\n//   });\n\n//   try {\n//     const user = await api.Projects.search();\n//     log.debug(\"user\", user);\n//   } catch (e) {\n//     log.error(\"error\", { e });\n//   }\n// };\n\ninterface Profile {\n  id: number;\n  username: string;\n  name: string;\n  avatar_url: string;\n  email: string;\n}\n\nexport const getProfile = async ({ token }: getProfileParams): Promise<Profile> => {\n  const api = new Gitlab({\n    token: token,\n  });\n\n  const user = (await api.Users.current()) as any;\n\n  log.debug({ user });\n  return {\n    id: user.id,\n    username: user.username,\n    name: user.name,\n    avatar_url: user.avatar_url,\n    email: user.email,\n  } as Profile;\n};\n\n// gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/path_regex.rb#L137\nexport const extractProjectNameFromUrl = ({ url }: any): string | undefined => {\n  const parts = url\n    .split(\".git\")[0]\n    .match(\n      /https?:\\/\\/.*\\/((?:[a-zA-Z0-9_.][a-zA-Z0-9_\\-.]*[a-zA-Z0-9_-]|[a-zA-Z0-9_])\\/(?:[a-zA-Z0-9_.][a-zA-Z0-9_\\-.]*))$/\n    );\n\n  console.error(parts);\n  if (parts?.length > 1) {\n    return parts[parts.length - 1];\n  }\n\n  return undefined;\n};\n\nexport const isAuthorizedToPush = async ({\n  configuration,\n  token,\n}: {\n  configuration: Configuration;\n  token: string;\n}) => {\n  console.log({ configuration, token });\n\n  const projectName = extractProjectNameFromUrl({ url: configuration.sourceRepository.url });\n  if (!projectName) return false;\n\n  log.debug({ projectName });\n  const api = new Gitlab({\n    token,\n  });\n\n  const project = await api.Projects.show(projectName);\n  //@ts-ignore\n  const permissions = project.permissions;\n\n  log.debug({ project, permissions });\n\n  const hasProjectAccess = !!permissions.project_access;\n  const hasProjectAccessLevel = (permissions.project_access?.access_level || 0) >= 30;\n  const hasGroupAccessLevel = (permissions.group_access?.access_level || 0) >= 30;\n\n  return hasProjectAccess ? hasProjectAccessLevel : hasGroupAccessLevel;\n};\n"],"sourceRoot":""}